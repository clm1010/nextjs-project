datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 用户表
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  topics        Topic[] // 关联的话题
  posts         Post[] // 关联的帖子
  comments      Comment[] // 关联的评论
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// 话题表
model Topic {
  //字段名字     字段类型  字段属性
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // 关联 User 字段
  // 语法： 字段名称 字段类型（目标模型的名称）@relation(fields: [当前模型的外键], references: [目标模型的主键], onDelete: Cascade)
  // onDelete: Cascade 当目标模型User 某一天记录被删除，当前模型的记录也会被级联删除
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  // 关联 Post 字段
  posts       Post[]
}

// 帖子表
model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // 关联 User 字段
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  // 关联 Topic 字段
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  // 关联 Comment 字段
  comments  Comment[]
}

// 评论表
model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // 关联 User 字段
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  // 关联 Post 字段
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  // 评论模型自关联关系
  parent    Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[] @relation("Comments")
}
